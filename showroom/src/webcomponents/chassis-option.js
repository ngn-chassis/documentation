customElements.define("chassis-option",function(){let a=new WeakMap;return class extends HTMLElement{constructor(){super(),this.keySource="key"in KeyboardEvent.prototype?"key":"keyIdentifier"in KeyboardEvent.prototype?"keyIdentifier":"keyCode",this.attachShadow({mode:"open"});let b=document.createElement("div");b.insertAdjacentHTML("afterbegin",`<template><style>@charset UTF-8; @charset "UTF-8";:host{contain:content;display:flex;flex-direction:column;max-width:100%}:host *,:host :after,:host :before{box-sizing:border-box}chassis-option{contain:content;display:flex;flex-direction:column;max-width:100%}:host :after,:host :before,chassis-option *{box-sizing:border-box}</style><slot name="afterbegin"></slot><slot name="beforeoption"></slot><slot></slot><slot name="afteroption"></slot><slot name="beforeend"></slot></template>`);let c=b.querySelector("template");"content"in c?this.shadowRoot.appendChild(c.content.cloneNode(!0)):c.childNodes.forEach(a=>{this.shadowRoot.appendChild(a.cloneNode(!0))}),c=null,this.crypto=null;try{this.crypto=crypto}catch(a){this.crypto=msCrypto}// this.addEventListener('click', evt => {
//   console.log('chassis-option');
// })
a.set(this,{addPrivateProps:b=>{for(let c in b)a.get(this)[c]=b[c]},addReadOnlyProp:b=>{Object.defineProperty(this,b,a.get(this).readonlyProperty(b))},addReadOnlyProps:b=>{b.forEach(b=>a.get(this).addReadOnlyProp(b))},generateGuid:(a=null)=>{let b="10000000-1000-4000-8000-100000000000".replace(/[018]/g,a=>(a^this.crypto.getRandomValues(new Uint8Array(1))[0]&15>>a/4).toString(16));return a?`${a}_${b}`:b},getBooleanPropertyValue:a=>this.hasAttribute(a)&&"false"!==this.getAttribute(a),handleAttributeChange:(b,c)=>{a.get(this).sourceEl&&(this.setAttribute(b,c),a.get(this).sourceEl[b]=c)},handleBooleanAttributeChange:(b,c)=>{if(a.get(this).sourceEl){return["true","false","",null].includes(c)?"false"===c&&this.hasAttribute(b)?(this.removeAttribute(b),void(a.get(this).sourceEl[b]=!1)):void(a.get(this).sourceEl[b]=this.hasAttribute(b)):(console.error(`<${this.localName}> "${b}" attribute expected boolean but received "${c}"`),this.removeAttribute(b),void(a.get(this).sourceEl[b]=!1))}},handleBooleanPropertyChange:(b,c)=>c?void((!this.hasAttribute(b)||"true"!==this.getAttribute(b))&&(this.setAttribute(b,""),a.get(this).sourceEl[b]=!0)):(this.removeAttribute(b),void(a.get(this).sourceEl[b]=!1)),handlePropertyChange:(b,c)=>{a.get(this).sourceEl[b]=c,this.hasAttribute(b)&&this.getAttribute(b)===c||this.setAttribute(b,c)},readonlyProperty:b=>({get:()=>a.get(this).sourceEl[b],set:()=>a.get(this).throw("readonly",{name:b})}),throw:(a,b)=>{let c="ERROR <chassis-option> ";"readonly"===a?c+=`Cannot set read-only property "${b.name}".`:c=c.trim();console.error(c)}}),this.parent=null,this.defaultSelected=!1,this.addEventListener("mouseover",()=>this.parent.mousedown?console.log("select me"):void this.parent.hoverOption(this.index)),this.addEventListener("mousemove",()=>this.parent.hoverOption(this.index)),this.addEventListener("mouseout",()=>this.parent.unHoverOption(this.index))}static get observedAttributes(){return["disabled","hovered","label","selected","value"]}get disabled(){return a.get(this).getBooleanPropertyValue("disabled")}set disabled(b){a.get(this).handleBooleanPropertyChange("disabled",b)}set form(b){return a.get(this).throw("readonly",{name:"form"})}get index(){return this.parent.options.findIndex(a=>a.displayElement===this)}set index(b){return a.get(this).throw("readonly",{name:"index"})}get label(){return a.get(this).sourceEl.label}set label(b){a.get(this).handlePropertyChange("label",b)}get selected(){return a.get(this).getBooleanPropertyValue("selected")}set selected(b){a.get(this).handleBooleanPropertyChange("selected",b)}get text(){return this.innerHTML}set text(a){this.innerHTML=a}get value(){return a.get(this).sourceEl.value}set value(b){a.get(this).handlePropertyChange("value",b)}get hovered(){return this.hasAttribute("hover")}set hovered(a){a?this.setAttribute("hover",""):this.removeAttribute("hover")}attributeChangedCallback(b,c,d){if(b=b.toLowerCase(),d!==c)return"disabled"===b||"selected"===b||"hovered"===b?a.get(this).handleBooleanAttributeChange(b,d):"label"===b||"value"===b?a.get(this).handleAttributeChange(b,d):void 0}connectedCallback(){}/**
     * @method remove
     * Remove this option from the DOM.
     * @override
     */remove(a=!0){this.parent.options.splice(this.index,1),super.remove()}}}());