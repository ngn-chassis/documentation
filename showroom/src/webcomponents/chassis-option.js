customElements.define("chassis-option",function(){let a=new WeakMap;return class extends HTMLElement{constructor(){super(),this.keySource="key"in KeyboardEvent.prototype?"key":"keyIdentifier"in KeyboardEvent.prototype?"keyIdentifier":"keyCode",this.attachShadow({mode:"open"});let b=document.createElement("div");b.insertAdjacentHTML("afterbegin",`<template><style>@charset "UTF-8"; :host {
  contain: content;
  display: flex;
  flex-direction: column;
  max-width: 100%;
}

:host *,
:host *:before,
:host *:after {
  box-sizing: border-box;
}

chassis-option {
  contain: content;
  display: flex;
  flex-direction: column;
  max-width: 100%;
}

chassis-option *,
chassis-option *:before,
chassis-option *:after {
  box-sizing: border-box;
}</style><slot name="afterbegin"></slot><slot name="beforeoption"></slot><slot></slot><slot name="afteroption"></slot><slot name="beforeend"></slot></template>`);let c=b.querySelector("template");"content"in c?this.shadowRoot.appendChild(c.content.cloneNode(!0)):c.childNodes.forEach(a=>{this.shadowRoot.appendChild(a.cloneNode(!0))}),c=null,this.crypto=null;try{this.crypto=crypto}catch(a){this.crypto=msCrypto}a.set(this,{sourceElement:null,addAttribute:b=>{Object.defineProperty(this,b,{get(){return this.getAttribute(b)},set(c){a.get(this).setAttributeValue(b,c)}})},addAttributes:b=>b.forEach(b=>a.get(this).addAttribute(b)),setAttributeValue:(b,c)=>{this.setAttribute(b,c),a.get(this).sourceElement&&(a.get(this).sourceElement[b]=c)},addReadOnlyProperty:b=>{let c="object"==typeof b;if(!c&&"string"!=typeof b)return console.error("ERROR <chassis-option> Read-only property must be type \"object\" or \"string\"");let d={set(){a.get(this).throw("readonly",{prop:c?b.name:b})}};d.get=c&&b.hasOwnProperty("get")?b.get:function(){return a.get(this)[b]},Object.defineProperty(this,c?b.name:b,d)},addReadOnlyProperties:b=>b.forEach(b=>a.get(this).addReadOnlyProperty(b)),setReadOnlyPropertyValue:b=>a.get(this)[prop]=b,addBooleanAttribute:b=>{Object.defineProperty(this,b,{get(){return a.get(this).getBooleanAttributeValue(b)},set(c){a.get(this).setBooleanAttributeValue(b,c)}})},addBooleanAttributes:b=>b.forEach(b=>a.get(this).addBooleanAttribute(b)),getBooleanAttributeValue:a=>this.hasAttribute(a)&&"false"!==this.getAttribute(a),setBooleanAttributeValue:(b,c)=>{"boolean"==typeof c&&(c=c.toString());if(!["true","false","",null].includes(c))return console.error(`<${this.localName}> "${b}" attribute expected boolean but received "${c}"`),this.removeAttribute(b),void(a.get(this).sourceElement&&(a.get(this).sourceElement[b]=!1));switch(c){case"false":case null:this.removeAttribute(b),a.get(this).sourceElement&&(a.get(this).sourceElement[b]=!1);break;case"true":case"":this.setAttribute(b,""),a.get(this).sourceElement&&(a.get(this).sourceElement[b]=!0);break;default:}},addPrivateProperties:b=>{for(let c in b)a.get(this)[c]=b[c]},generateGuid:(a=null)=>{let b="10000000-1000-4000-8000-100000000000".replace(/[018]/g,a=>(a^this.crypto.getRandomValues(new Uint8Array(1))[0]&15>>a/4).toString(16));return a?`${a}_${b}`:b},emit:(b,c,d=null)=>d?d.dispatchEvent(a.get(this).newEvent(b,c)):void this.dispatchEvent(a.get(this).newEvent(b,c)),newEvent:(a,b)=>new CustomEvent(a,{detail:b}),throw:(a,b)=>{let c="ERROR <chassis-option> ";"readonly"===a?c+=`Cannot set read-only property "${b.prop}".`:c=c.trim();console.error(c)}}),this.defaultSelected=!1,a.get(this).addAttributes(["id","label","value"]),a.get(this).addBooleanAttributes(["disabled","hover","selected"]),a.get(this).addReadOnlyProperties(["form",{name:"index",get(){return this.parentNode.options.findIndex(a=>a.displayElement===this)}}]),a.get(this).addPrivateProperties({form:null,mouseButtonDown:a=>{let b=a.buttons===void 0?a.nativeEvent.which:a.buttons;return 1<=b},mousemoveHandler:()=>a.get(this).emit("option.hovered",this.index),mouseoutHandler:()=>this.hover=!1,mouseoverHandler:b=>{let c=a.get(this).mouseButtonDown(b);if(!(this.parentNode.multiple&&c))return void(this.hover=!0);let{shiftKey:d,metaKey:e,ctrlKey:f}=b;a.get(this).select(d,e,f,c)},select:(b=!1,c=!1,d=!1,e=!1)=>{let{index:f}=this;a.get(this).emit("option.selected",{index:f,shiftKey:b,metaKey:c,ctrlKey:d,mousedown:e},this.parentNode)},selectionHandler:b=>{let{shiftKey:c,metaKey:d,ctrlKey:e}=b;a.get(this).select(c,d,e)},parentStateChangeHandler:b=>{let{name:c,value:d}=b.detail;switch(c){case"multiple":d?(this.removeEventListener("mouseup",a.get(this).selectionHandler),this.addEventListener("mousedown",a.get(this).selectionHandler)):(this.addEventListener("mouseup",a.get(this).selectionHandler),this.removeEventListener("mousedown",a.get(this).selectionHandler));break;default:}}})}static get observedAttributes(){return["disabled","hover","label","selected","value"]}get text(){return this.innerHTML}set text(a){this.innerHTML=a}attributeChangedCallback(b,c,d){if(b=b.toLowerCase(),d!==c)return"disabled"===b||"selected"===b||"hovered"===b?a.get(this).setBooleanAttributeValue(b,d):"label"===b||"value"===b?a.get(this).setAttributeValue(b,d):void 0}connectedCallback(){this.addEventListener("mouseover",a.get(this).mouseoverHandler),this.addEventListener("mousemove",a.get(this).mousemoveHandler),this.addEventListener("mouseout",a.get(this).mouseoutHandler),this.addEventListener("mouseup",a.get(this).selectionHandler),this.parentNode.addEventListener("state.change",a.get(this).parentStateChangeHandler)}disconnectedCallback(){this.removeEventListener("mouseover",a.get(this).mouseoverHandler),this.removeEventListener("mousemove",a.get(this).mousemoveHandler),this.removeEventListener("mouseout",a.get(this).mouseoutHandler),this.removeEventListener("mouseup",a.get(this).selectionHandler),this.removeEventListener("mousedown",a.get(this).selectionHandler),this.displayElement.removeEventListener("mousedown",_p.get(this).multipleMousedownHandler),this.displayElement.removeEventListener("mouseup",_p.get(this).multipleMouseupHandler),this.displayElement.removeEventListener("mouseup",_p.get(this).mouseupHandler),this.parentNode.removeEventListener("state.change",a.get(this).parentStateChangeHandler)}/**
     * @method remove
     * Remove this option from the DOM.
     * @override
     */remove(){this.parentNode.options.splice(this.index,1),super.remove()}}}());