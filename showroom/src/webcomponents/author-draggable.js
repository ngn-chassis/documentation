customElements.define("author-draggable",class extends AuthorElement(HTMLElement){constructor(){super(`<template><style>@charset "UTF-8"; :host{display:flex}:host *,:host :after,:host :before{box-sizing:border-box}:host([dragging]){position:fixed;z-index:2147483647}:host([clone]){contain:content}author-draggable{display:flex}author-draggable *,author-draggable :after,author-draggable :before{box-sizing:border-box}author-draggable[dragging]){position:fixed;z-index:2147483647}author-draggable[clone]){contain:content}</style><slot></slot></template>`),this.UTIL.defineAttributes({type:{default:null}}),this.UTIL.defineProperties({clone:{private:!0,default:null},cursorOffset:{private:!0,default:null},dragIsActive:{private:!0,default:!1},dimensions:{private:!0,readonly:!0,get:()=>this.getBoundingClientRect()},pointerEventsSupported:{private:!0,readonly:!0,default:window.PointerEvent!==void 0},userIsTouching:{private:!0,default:!1},types:{private:!0,readonly:!0,get:()=>this.type?this.type.replace(/\s+/g," ").trim().split(" "):null}}),this.UTIL.definePrivateMethods({appendClone:()=>{this.PRIVATE.clone=this.cloneNode(!0),this.PRIVATE.clone.setAttribute("clone","");let a=!this.nextElementSibling,b=!this.previousElementSibling&&a;a||b?this.parentNode.appendChild(this.PRIVATE.clone):this.parentNode.insertBefore(this.PRIVATE.clone,this)},forwardEvent:(a,b,c={})=>{a.preventDefault(),this.PRIVATE.pointerEventsSupported||this.emit(b,c,this)},initiateDrag:()=>{let{width:a,height:b}=this.PRIVATE.dimensions;this.UTIL.setStyleProperties("dragging",[{name:"width",value:`${a}px`},{name:"height",value:`${b}px`}]),this.setAttribute("dragging",""),this.PRIVATE.dragIsActive=!0,this.emit("after.drag.start")},pointerMoveHandler:a=>{this.PRIVATE.dragIsActive||(this.emit("drag.start"),this.PRIVATE.appendClone(),this.PRIVATE.initiateDrag()),this.emit("drag.active",a),this.PRIVATE.updatePosition(a)},reset:()=>{this.parentNode.removeChild(this.PRIVATE.clone),this.PRIVATE.clone=null,this.removeAttribute("dragging"),this.UTIL.removeStyleProperties("dragging",["width","height","left","top"]),this.PRIVATE.dragIsActive=!1,this.PRIVATE.cursorOffset=null,document.removeEventListener(this.PRIVATE.pointerEventsSupported?"pointermove":"mousemove",this.PRIVATE.pointerMoveHandler)},updatePosition:a=>{let{cursorOffset:b}=this.PRIVATE;this.UTIL.setStyleProperty("dragging","left",`${a.clientX-b.x}px`),this.UTIL.setStyleProperty("dragging","top",`${a.clientY-b.y}px`)}}),this.UTIL.registerListeners(this,{connected:()=>{this.UTIL.insertStyleRules({dragging:":host([dragging]) {}",clone:":host([clone]) {}"})},mousedown:a=>this.PRIVATE.userIsTouching?a.preventDefault():void(console.log("mousedown"),this.PRIVATE.forwardEvent(a,"pointerdown")),touchstart:a=>{console.log("touchstart"),a.preventDefault(),this.PRIVATE.userIsTouching=!0,this.PRIVATE.forwardEvent(a,"pointerdown")},pointerdown:a=>{console.log("pointerdown"),this.PRIVATE.cursorOffset={x:a.clientX-this.PRIVATE.dimensions.left,y:a.clientY-this.PRIVATE.dimensions.top},document.addEventListener(this.PRIVATE.pointerEventsSupported?"pointermove":"mousemove",this.PRIVATE.pointerMoveHandler)}}),this.UTIL.registerListeners(document,{mouseup:()=>document.removeEventListener(this.PRIVATE.pointerEventsSupported?"pointermove":"mousemove",this.PRIVATE.pointerMoveHandler),touchend:()=>document.removeEventListener(this.PRIVATE.pointerEventsSupported?"pointermove":"mousemove",this.PRIVATE.pointerMoveHandler),pointerup:a=>this.PRIVATE.dragIsActive?void(this.PRIVATE.reset(),this.emit("drag.end",a)):this.emit("after.drag.end",a)})}static get observedAttributes(){return["type"]}});